Loading checkpoint shards: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 2/2 [00:07<00:00,  3.57s/it]
<class 'datasets.arrow_dataset.Dataset'>
--> Training Set Length = 900
--> Validation Set Length = 100
The gate was not present, so initializing it!
/data/data/arrv/env/test/lib/python3.12/site-packages/torch/cuda/memory.py:343: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
Training Epoch: 1:   0%|[34m                                                                                                                        [0m| 0/225 [00:00<?, ?it/s][0m/data/data/arrv/ThinkTuning_v1/src/think_tuner.py:218: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
The indices are: tensor([  0,   4,  17,  42,  43,  46,  48,  84,  85,  98, 133, 154, 155],
       device='cuda:1')
The indices are: tensor([  0,   4,  11,  12,  13,  31,  34,  36,  37,  40,  54,  56,  62,  64,
        102, 103, 121, 122, 130, 132, 138, 145, 154, 155], device='cuda:1')
The indices are: tensor([  0,   4,   5,   6,  10,  12,  18,  44,  45,  46,  49,  77,  78,  89,
         97, 110, 136, 154, 155], device='cuda:1')
The indices are: tensor([  0,   4,   7,  13,  14,  20,  40,  43,  44,  62,  65,  69,  75, 108,
        142, 155], device='cuda:1')
The selected-indices are: [[48, 0, 43], [0, 132, 56], [10, 77, 46], [142, 4, 13]]
  sampled_token = torch.tensor(topk_indices.indices[i].unsqueeze(0)).to(device=new_sequence.device)  # Add the sampled token
torch.Size([1, 1680])
torch.Size([1, 1680])
torch.Size([1, 1680])
torch.Size([1, 1680])
torch.Size([1, 1680])
torch.Size([1, 1680])
torch.Size([1, 1680])
torch.Size([1, 1680])
torch.Size([1, 1680])
torch.Size([1, 1680])
torch.Size([1, 1680])
torch.Size([1, 1680])
Training Epoch: 1/1, step 0/225 completed (loss: 1.3150620460510254):   0%|[34mâ–Ž                                                          [0m| 1/225 [01:11<4:25:13, 71.04s/it][0m
The indices are: tensor([  0,   1,   4,   8,  10,  14,  22,  23,  25,  38,  40,  42,  43,  45,
         48,  49,  50,  51,  52,  58,  62,  64,  67,  71,  74,  76,  77,  78,
         79,  83,  92,  94, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111,
        112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127,
        128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,
        158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 173,
        174, 175, 176, 177, 178, 179, 183, 184, 185, 186, 187, 188, 189, 190,
        191, 193, 194, 195, 197, 198, 201, 202, 203, 204, 206, 207, 208, 210,
        211, 212, 213, 216, 217, 219, 220, 221, 222, 223, 225, 226, 227, 229,
        232, 233, 234, 237, 238, 241, 242, 244, 246, 247, 249, 250, 251, 252,
        254, 255, 256, 258, 260, 262, 264, 265, 266, 267, 268, 270, 271, 272,
        276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 292, 293,
        298, 299, 300, 301, 302, 303, 304, 306, 309, 310, 311, 312, 313, 315,
        317, 318, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333,
        335, 337, 338, 340, 342, 343, 346, 347, 348, 353, 355, 357, 363, 364,
        366, 370, 372, 377, 378, 379, 380, 385, 387, 388, 394, 395, 397, 398,
        400, 401], device='cuda:1')
The indices are: tensor([  0,   1,   4,   9,  10,  11,  19,  24,  25,  27,  37,  38,  44,  46,
         47,  48,  49,  50,  51,  57,  61,  65,  67,  71,  72,  73,  74,  75,
         76,  80,  84,  85,  87,  88,  89,  90,  91,  92,  95,  99, 100, 101,
        105, 106, 108, 109, 110, 112, 113, 116, 117, 125, 127, 128, 129, 130,
        131, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 150, 151, 152,
        153, 154, 155, 156, 157, 159, 160, 161, 165, 171, 174, 177, 179, 180,
        181, 183, 184, 185, 190, 191, 192, 193, 194, 195, 202, 203, 207, 208,
        209, 213, 214, 222, 224, 227, 228, 232, 236, 238, 240, 247, 248, 249,
        261, 262, 263, 265, 268, 269, 270, 271, 273, 274, 276, 277, 280, 283,
        284, 285, 288, 292, 307, 308, 309, 311, 313, 315, 322, 323, 330, 331,
        333, 334, 335, 336, 340, 345, 349, 350, 352, 356, 359, 360, 361, 362,
        364, 367, 369, 376, 378, 379, 381, 382, 389, 390, 392, 393, 394, 395,
        398, 400, 401], device='cuda:1')
The indices are: tensor([  0,   1,   4,   6,   7,  12,  25,  26,  27,  29,  31,  37,  38,  46,
         52,  55,  59,  60,  61,  62,  64,  65,  74,  75,  82,  83,  86,  87,
         89,  91,  92,  93,  94,  95,  96,  97,  98, 100, 102, 104, 105, 106,
        107, 108, 109, 110, 111, 112, 114, 115, 116, 120, 121, 122, 123, 124,
        125, 126, 127, 128, 132, 133, 134, 138, 140, 141, 142, 144, 145, 146,
        149, 150, 151, 152, 163, 168, 169, 170, 182, 183, 184, 185, 186, 187,
        188, 189, 190, 191, 192, 193, 196, 199, 200, 201, 202, 204, 205, 206,
        209, 212, 214, 219, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
        233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 247, 248, 249,
        250, 251, 253, 254, 268, 271, 272, 273, 274, 282, 283, 284, 292, 293,
        296, 297, 303, 306, 310, 321, 324, 327, 330, 331, 332, 333, 334, 335,
        337, 338, 339, 343, 347, 349, 350, 351, 352, 354, 356, 357, 358, 359,
        360, 362, 367, 368, 370, 374, 375, 376, 382, 383, 384, 385, 387, 388,
        389, 390, 391, 392, 393, 396, 398, 399, 401], device='cuda:1')
The indices are: tensor([  0,   1,   4,  30,  49,  50,  54,  55,  56,  57,  58,  59,  60,  61,
         62,  65,  67,  68,  69,  70,  71,  74,  76,  77,  79,  80,  81,  82,
         83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,
         98, 103, 104, 107, 108, 109, 110, 114, 118, 120, 121, 122, 123, 124,
        125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140,
        141, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157,
        158, 160, 161, 165, 166, 169, 170, 171, 172, 173, 174, 179, 180, 181,
        182, 183, 185, 186, 187, 188, 189, 190, 191, 193, 199, 204, 213, 217,
        218, 219, 220, 221, 222, 224, 225, 226, 233, 237, 238, 239, 241, 242,
        243, 252, 254, 260, 261, 264, 265, 266, 267, 277, 280, 281, 282, 283,
        286, 287, 288, 291, 292, 293, 297, 304, 312, 313, 314, 317, 319, 320,
        322, 329, 331, 344, 353, 354, 355, 356, 357, 358, 359, 360, 369, 370,
        371, 372, 375, 381, 383, 384, 387, 391, 396, 399, 401],
       device='cuda:1')
The selected-indices are: [[348, 241, 277], [280, 131, 110], [144, 273, 327], [260, 166, 61]]
torch.Size([2, 3726])
  File "/data/data/arrv/ThinkTuning_v1/train.py", line 863, in <module>
    fire.Fire(main)
  File "/data/data/arrv/env/test/lib/python3.12/site-packages/fire/core.py", line 143, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/data/arrv/env/test/lib/python3.12/site-packages/fire/core.py", line 477, in _Fire
    component, remaining_args = _CallAndUpdateTrace(
                                ^^^^^^^^^^^^^^^^^^^^
  File "/data/data/arrv/env/test/lib/python3.12/site-packages/fire/core.py", line 693, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                ^^^^^^^^^^^^^^^^^^^^^^
  File "/data/data/arrv/ThinkTuning_v1/train.py", line 845, in main
    results = train(
              ^^^^^^
  File "/data/data/arrv/ThinkTuning_v1/train.py", line 393, in train
    outputs = think_tuner_step(batch, model=model, tokenizer=tokenizer)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/data/arrv/ThinkTuning_v1/src/think_tuner.py", line 304, in think_tuner_step
    total_gate_loss, total_reinforce_loss, total_nll_thought, logy = start_thinking(batch["input_ids"], outputs.last_hidden_state, logits,  batch["labels"], unreduced_loss, model, tokenizer)
                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/data/arrv/ThinkTuning_v1/src/think_tuner.py", line 262, in start_thinking
    new_hidden_states = model.model(
                        ^^^^^^^^^^^^
  File "/data/data/arrv/env/test/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/data/arrv/env/test/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/data/arrv/env/test/lib/python3.12/site-packages/transformers/models/llama/modeling_llama.py", line 1001, in forward
    layer_outputs = decoder_layer(
                    ^^^^^^^^^^^^^^
  File "/data/data/arrv/env/test/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/data/arrv/env/test/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/data/arrv/env/test/lib/python3.12/site-packages/accelerate/hooks.py", line 170, in new_forward
    output = module._old_forward(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/data/arrv/env/test/lib/python3.12/site-packages/transformers/models/llama/modeling_llama.py", line 751, in forward
    hidden_states = residual + hidden_states
                    ~~~~~~~~~^~~~~~~~~~~~~~~
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 118.00 MiB. GPU 0 has a total capacity of 93.12 GiB of which 29.12 MiB is free. Including non-PyTorch memory, this process has 93.08 GiB memory in use. Of the allocated memory 91.03 GiB is allocated by PyTorch, and 1.32 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
