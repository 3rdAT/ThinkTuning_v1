Loading checkpoint shards: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 2/2 [00:05<00:00,  2.85s/it]
<class 'datasets.arrow_dataset.Dataset'>
--> Training Set Length = 900
--> Validation Set Length = 100
The gate was not present, so initializing it!
/data/data/arrv/env/tv/lib/python3.12/site-packages/torch/cuda/memory.py:343: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
Training Epoch: 1:   0%|[34m                                                                                                     [0m| 0/225 [00:00<?, ?it/s][0m/data/data/arrv/ThinkTuning_v1/src/think_tuner.py:214: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
The indices are: tensor([  0,   4,   6,   7,   8,  11,  32,  33,  34,  63,  69,  70,  73,  74,
         81,  97, 101, 102, 104, 105, 108, 109, 117, 118, 147, 148, 149, 153,
        161, 162, 201, 207, 208, 216, 217, 218, 227, 228, 229, 234, 247, 248,
        250, 257, 258], device='cuda:3')
The indices are: tensor([  0,   4,   5,  14,  19,  22,  23,  38,  43,  44,  47,  48,  53,  74,
         78,  80,  86,  90,  96,  98, 119, 120, 126, 135, 138, 151, 182, 197,
        215, 224, 257, 258], device='cuda:3')
The indices are: tensor([  0,   4,  13,  30,  31,  34,  35,  48,  63,  65,  75,  76,  80,  83,
         84,  87,  94,  95,  98, 106, 117, 118, 121, 125, 126, 137, 145, 160,
        171, 177, 188, 196, 208, 212, 225, 257, 258], device='cuda:3')
The indices are: tensor([  0,   4,   5,  10,  12,  14,  16,  18,  19,  21,  22,  23,  24,  25,
         34,  43,  44,  47,  48,  53,  56,  60,  64,  69,  70, 100, 112, 118,
        183, 186, 190, 214, 258], device='cuda:3')
The selected-indices are: [[250, 217, 105], [258, 4, 43], [106, 177, 225], [118, 5, 60]]
  sampled_token = torch.tensor(topk_indices.indices[i].unsqueeze(0)).to(device=new_sequence.device)  # Add the sampled token
Starting from v4.46, the `logits` model output will have the same type as the model (except at train time, where it will always be FP32)
/data/data/arrv/env/tv/lib/python3.12/site-packages/torch/autograd/graph.py:769: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at ../aten/src/ATen/cuda/CublasHandlePool.cpp:135.)
  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
Training Epoch: 1/1, step 1/225 completed (loss: 1.939846158027649):   1%|[34mâ–Ž                                        [0m| 2/225 [00:41<1:16:37, 20.61s/it][0m
The indices are: tensor([  0,   1,   4,   7,  11,  12,  13,  27,  50,  52,  61,  65,  66,  67,
         68,  70,  71,  79,  80,  85,  86,  95, 111, 119, 120, 137, 138, 143,
        144, 157, 158, 161, 163, 164, 174, 181, 182, 183, 184, 194, 195, 200,
        215, 216, 223, 242, 252, 253, 266, 289, 294, 309, 321, 322, 324, 339,
        340, 341], device='cuda:3')
The indices are: tensor([  0,   1,   4,   6,   7,   8,   9,  13,  14,  18,  36,  42,  45,  51,
         56,  58,  61,  62,  84,  85,  87,  88,  93, 100, 115, 129, 130, 131,
        132, 135, 137, 143, 145, 146, 148, 149, 151, 152, 155, 158, 174, 183,
        184, 185, 211, 214, 217, 235, 242, 246, 247, 248, 249, 265, 270, 287,
        288, 289, 299, 317, 323, 324, 325, 326, 328, 329, 340, 341],
       device='cuda:3')
The indices are: tensor([  0,   1,   4,   7,   8,  11,  15,  16,  18,  28,  29,  31,  42,  43,
         45,  49,  50,  51,  53,  54,  57,  58,  59,  60,  61,  64,  68,  69,
         72,  75,  79,  82,  92,  95,  96,  97, 100, 108, 109, 110, 112, 114,
        118, 119, 120, 127, 128, 130, 131, 138, 145, 146, 159, 162, 165, 168,
        169, 171, 172, 176, 186, 187, 190, 192, 195, 200, 203, 209, 213, 228,
        233, 241, 244, 249, 250, 251, 259, 260, 271, 272, 282, 283, 291, 293,
        294, 306, 320, 321, 322, 332, 333, 337, 340, 341], device='cuda:3')
The indices are: tensor([  0,   1,   4,   5,   8,   9,  10,  39,  40,  41,  44,  49,  51,  54,
         55,  57,  61,  65,  66,  67,  71,  72,  75,  76,  77, 100, 101, 102,
        103, 104, 105, 107, 108, 109, 111, 119, 142, 143, 144, 145, 148, 156,
        157, 160, 161, 168, 171, 173, 174, 176, 181, 184, 204, 222, 223, 226,
        227, 229, 230, 242, 247, 248, 266, 267, 270, 271, 272, 273, 275, 276,
        289, 290, 293, 294, 306, 308, 309, 313, 314, 323, 324, 326, 327, 328,
        333, 341], device='cuda:3')
The selected-indices are: [[163, 138, 253], [93, 14, 62], [337, 272, 108], [145, 289, 276]]
The indices are: tensor([   0,    1,    2,  ..., 2217, 2218, 2219], device='cuda:3')
The indices are: tensor([   0,    1,    2,  ..., 2217, 2218, 2219], device='cuda:3')
The indices are: tensor([   0,    1,    2,    4,    7,    8,    9,   14,   15,   16,   17,   18,
          19,   32,   33,   39,   46,   54,   55,   56,   61,   66,   77,   82,
          83,   91,  102,  103,  108,  114,  115,  200,  207,  230,  239,  253,
         327,  335,  337,  341,  343,  358,  364,  380,  401,  419,  435,  452,
         470,  486,  503,  514,  515,  527,  584,  596,  708,  740,  748,  776,
         786,  787,  798,  800,  807,  826,  834,  854,  882,  907,  938,  940,
         970,  972,  998, 1002, 1004, 1034, 1036, 1066, 1068, 1095, 1098, 1100,
        1123, 1127, 1130, 1132, 1159, 1162, 1164, 1194, 1196, 1221, 1245, 1248,
        1256, 1278, 1293, 1294, 1319, 1328, 1330, 1331, 1349, 1353, 1355, 1367,
        1368, 1369, 1373, 1374, 1401, 1412, 1419, 1476, 1488, 1575, 1620, 1662,
        1669, 1676, 1695, 1698, 1711, 1737, 1745, 1764, 1765, 1766, 1767, 1768,
        1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
        1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,
        1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
        1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816,
        1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828,
        1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840,
        1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852,
        1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
        1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876,
        1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888,
        1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900,
        1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912,
        1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
        1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936,
        1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948,
        1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960,
        1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972,
        1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984,
        1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
        1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020,
        2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032,
        2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
        2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056,
        2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068,
        2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080,
        2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092,
        2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104,
        2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116,
        2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128,
        2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140,
        2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152,
        2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164,
        2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176,
        2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188,
        2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200,
        2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212,
        2213, 2214, 2215, 2216, 2217, 2218, 2219], device='cuda:3')
The indices are: tensor([   0,    1,    2,    4,   12,   30,   34,   40,   41,   42,   47,   52,
          57,   58,   66,   74,   76,   93,   98,   99,  109,  118,  126,  148,
         155,  161,  302,  322,  327,  402,  407,  412,  482,  487,  506,  513,
         519,  523,  527,  529,  552,  574,  598,  617,  622,  644,  668,  687,
         692,  709,  714,  731,  738,  762,  779,  784,  803,  808,  825,  832,
         847,  854,  871,  873,  878,  895,  897,  900,  902,  924,  946,  948,
         967,  972,  989,  994, 1018, 1042, 1059, 1064, 1083, 1088, 1105, 1112,
        1127, 1134, 1153, 1158, 1177, 1180, 1182, 1197, 1202, 1204, 1221, 1223,
        1226, 1228, 1245, 1247, 1250, 1252, 1261, 1267, 1269, 1272, 1275, 1299,
        1323, 1340, 1345, 1364, 1369, 1388, 1393, 1415, 1434, 1439, 1458, 1461,
        1463, 1478, 1485, 1502, 1507, 1509, 1526, 1528, 1531, 1533, 1550, 1553,
        1556, 1573, 1580, 1597, 1599, 1604, 1619, 1621, 1627, 1644, 1646, 1649,
        1652, 1669, 1676, 1698, 1717, 1722, 1741, 1744, 1746, 1763, 1768, 1790,
        1792, 1811, 1814, 1816, 1833, 1836, 1839, 1856, 1863, 1880, 1887, 1902,
        1904, 1910, 1927, 1929, 1935, 1952, 1954, 1959, 1974, 1976, 1982, 1999,
        2001, 2007, 2024, 2026, 2032, 2043, 2047, 2160, 2178, 2180, 2199, 2204,
        2215, 2219], device='cuda:3')
The selected-indices are: [[1691, 1722, 1574], [2095, 1900, 2040], [2036, 18, 32], [30, 118, 895]]
  File "/data/data/arrv/ThinkTuning_v1/train.py", line 854, in <module>
    fire.Fire(main)
  File "/data/data/arrv/env/tv/lib/python3.12/site-packages/fire/core.py", line 135, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/data/arrv/env/tv/lib/python3.12/site-packages/fire/core.py", line 468, in _Fire
    component, remaining_args = _CallAndUpdateTrace(
                                ^^^^^^^^^^^^^^^^^^^^
  File "/data/data/arrv/env/tv/lib/python3.12/site-packages/fire/core.py", line 684, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                ^^^^^^^^^^^^^^^^^^^^^^
  File "/data/data/arrv/ThinkTuning_v1/train.py", line 836, in main
    results = train(
              ^^^^^^
  File "/data/data/arrv/ThinkTuning_v1/train.py", line 388, in train
    outputs = think_tuner_step(batch, model=model, tokenizer=tokenizer)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/data/arrv/ThinkTuning_v1/src/think_tuner.py", line 282, in think_tuner_step
    total_gate_loss, total_reinforce_loss, total_nll_thought, logy = start_thinking(batch["input_ids"], outputs.last_hidden_state, logits,  batch["labels"], unreduced_loss, model, tokenizer)
                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/data/arrv/ThinkTuning_v1/src/think_tuner.py", line 234, in start_thinking
    packed_reasoning_path, packed_attention_mask, packed_reasoning_path_casual_mask, packed = get_packed_inputs(reasoning_path, max_length=4090, pad_token_id=model.config.eos_token_id, thought_index=thought_index)
                                                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/data/arrv/ThinkTuning_v1/pack_input_ids.py", line 127, in get_packed_inputs
    casual_mask = build_batched_causal_mask_from_attention_mask(attention_mask, torch.float).to(input_ids[0].device)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data/data/arrv/ThinkTuning_v1/pack_input_ids.py", line 107, in build_batched_causal_mask_from_attention_mask
    masks = zero_positions & masks_per_j  # Shape: [bz, seq_len, seq_len, seq_len]
            ~~~~~~~~~~~~~~~^~~~~~~~~~~~~
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 31.07 GiB. GPU 0 has a total capacity of 93.12 GiB of which 6.54 GiB is free. Including non-PyTorch memory, this process has 86.56 GiB memory in use. Of the allocated memory 68.68 GiB is allocated by PyTorch, and 17.16 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
